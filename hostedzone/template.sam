AWSTemplateFormatVersion: 2010-09-09
Description: Changes the Nameserver from a domain owned and managed by a registrar other than Route53 to use the Nameservers in AWS Route 53.

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  TargetEnvironment:
    Description: 'The target environment such as dev, test, demo etc.'
    Type: 'String'
    
  ProductName:
    Description: 'Represents the name of the product you want to call the deployment, such as FocusMark'
    Type: 'String'
    
  TargetDomain:
    Description: 'The domain that needs to be targeted by this Lambda to mapping nameservers to a Route 53 hosted zone'
    Type: 'String'
    
  TargetApiUrl:
    Description: 'The API Url used by the Lambda to assign Route 53 Nameservers to the Domain owned by the target domain registrar'
    Type: 'String'
    
  TargetApiKey:
    Description: 'The Key used to interact with the domain registrar API'
    Type: String
    
  TargetApiSecret:
    Description: 'The Secret used to interact with the domain registrar API'
    Type: String
    NoEcho: true

Resources:
  TargetDomainApiUrl:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: The API URL to invoke to assign nameserver details to the domain
      Name: !Sub '/${ProductName}/${TargetEnvironment}/lambda/hostedzone_nameserver_resolver/${TargetDomain}/api-url'
      Tier: Standard
      Type: String
      Value: !Ref TargetApiUrl
          
  TargetDomainApiSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '/${ProductName}/${TargetEnvironment}/lambda/hostedzone_nameserver_resolver/${TargetDomain}/api-secret'
      Description: "API Secret key used to interact with the domain registrar"
      SecretString: !Sub '${TargetApiKey}:${TargetApiSecret}'
      
  FocusMarkDotAppZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: !Sub 'Hosted Zone for ${ProductName}.app'
      Name: !Sub '${ProductName}.app'
        
  HostedZoneNameServerResolver:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt HostedZoneNamespaceResolver.Arn
      HostedZoneId: !Ref FocusMarkDotAppZone

  HostedZoneNamespaceResolver:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProductName}-${TargetEnvironment}-lambda-hostedzone_nameserver_resolver'
      Handler: src/handler.run
      Runtime: nodejs12.x
      MemorySize: 256
      Timeout: 300
      Description: Handler used as part of a CloudFormation deployment for Hosted Zones. Invokes GoDaddy APIs to assign nameservers to Route 53 a Hosted Zone
      Role: !GetAtt HostedZoneNameserverResolverRole.Arn
      Environment:
        Variables:
          hosted_zone: !Sub '/${ProductName}/${TargetEnvironment}/lambda/hostedzone_nameserver_resolver/${TargetDomain}/hosted-zone'
          registrar_secret: !Sub '/${ProductName}/${TargetEnvironment}/lambda/hostedzone_nameserver_resolver/${TargetDomain}/api-secret'
          registrar_api: !Sub '/${ProductName}/${TargetEnvironment}/lambda/hostedzone_nameserver_resolver/${TargetDomain}/api-url'
  
  # IAM Role used by the Lambda for handling HTTP POST requests that create projects.
  HostedZoneNameserverResolverRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub 'Allows the usage of CloudWatch logs, retrieving secrets from secret manager and parameters from systems manager'
      RoleName: !Sub '${ProductName}-${TargetEnvironment}-role-hostedzone_nameserver_resolver'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${ProductName}-${TargetEnvironment}-policy-hostedzone_nameserver_resolver'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Ref TargetDomainApiSecret
              - Effect: Allow
                Action:
                  - 'route53:GetHostedZone'
                Resource:
                  - !Sub 'arn:aws:route53:::hostedzone/${FocusMarkDotAppZone}'
              - Effect: Allow
                Action:
                  'ssm:GetParameter'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProductName}/${TargetEnvironment}/lambda/hostedzone_nameserver_resolver/${TargetDomain}/api-url'
              - Effect: Allow
                Action: 
                  - 'xray:CreateGroup'
                  - 'xray:CreateSamplingRule'
                Resource: 
                  - 'arn:aws:xray:*:*:group/*/*'
                  - 'arn:aws:xray:*:*:sampling-rule/*'
              - Effect: Allow
                Action:
                  - 'xray:PutTelemetryRecords'
                  - 'xray:PutTraceSegments'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        
Outputs:
  HostedZone:
    Description: "Hosted Zone created with this stack"
    Value: !Ref FocusMarkDotAppZone
    Export:
      Name: !Sub '${ProductName}-route53-dotappzone'